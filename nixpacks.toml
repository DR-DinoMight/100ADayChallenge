[phases.setup]
nixPkgs = [
    "php",
    "composer",
    "nodejs",
    "npm",
    "git",
    "python311Packages.supervisor",
]

[phases.install]
cmds = [
    "composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs",
    "npm ci --only=production",
    "npm run build",
]

[phases.build]
cmds = [
    "mkdir -p /etc/supervisor/conf.d/",
    "cp /assets/worker-*.conf /etc/supervisor/conf.d/",
    "cp /assets/supervisord.conf /etc/supervisord.conf",
    "chmod +x /assets/start.sh",
    "php artisan cache:clear",
    "php artisan config:cache",
    "php artisan route:cache",
    "php artisan view:cache",
]

[start]
cmd = '/assets/start.sh'

[staticAssets]
"start.sh" = '''
#!/bin/bash

# Create necessary directories and set permissions
mkdir -p /app/storage/framework/{sessions,views,cache}
mkdir -p /app/storage/logs
mkdir -p /app/bootstrap/cache
chmod -R 775 /app/storage
chmod -R 775 /app/bootstrap/cache

# Generate application key if not exists
if [ ! -f /app/.env ]; then
  cp /app/.env.example /app/.env
fi

# Generate app key if not set
cd /app && php artisan key:generate --no-interaction || true

# Transform the nginx configuration
node /assets/scripts/prestart.mjs /assets/nginx.template.conf /etc/nginx.conf

# Start supervisor
supervisord -c /etc/supervisord.conf -n
'''

"scripts/prestart.mjs" = '''
import { readFileSync, writeFileSync } from "fs";

const templatePath = process.argv[2];
const outputPath = process.argv[3];

if (!templatePath || !outputPath) {
  console.error("Usage: node prestart.mjs <template> <output>");
  process.exit(1);
}

try {
  let template = readFileSync(templatePath, "utf8");

  // Replace template variables
  template = template.replace(/\\$\\{PORT\\}/g, process.env.PORT || "3000");
  template = template.replace(/\\$\\{NIXPACKS_PHP_ROOT_DIR\\}/g, "/app/public");
  template = template.replace(/\\$\\{NIXPACKS_PHP_FALLBACK_PATH\\}/g, "/index.php");
  template = template.replace(/\\$\\{IS_LARAVEL\\}/g, "true");

  // Write the processed config
  writeFileSync(outputPath, template);
  console.log(`Nginx config written to ${outputPath}`);
} catch (error) {
  console.error("Error processing nginx template:", error);
  process.exit(1);
}
'''

"supervisord.conf" = '''
[unix_http_server]
file=/assets/supervisor.sock

[supervisord]
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/assets/supervisord.pid
nodaemon=false
silent=false
minfds=1024
minprocs=200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///assets/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
'''

"worker-nginx.conf" = '''
[program:worker-nginx]
process_name=%(program_name)s_%(process_num)02d
command=nginx -c /etc/nginx.conf
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-nginx.log
stderr_logfile=/var/log/worker-nginx.log
'''

"worker-phpfpm.conf" = '''
[program:worker-phpfpm]
process_name=%(program_name)s_%(process_num)02d
command=php-fpm -y /assets/php-fpm.conf -F
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-phpfpm.log
stderr_logfile=/var/log/worker-phpfpm.log
'''

"worker-laravel.conf" = '''
[program:worker-laravel]
process_name=%(program_name)s_%(process_num)02d
command=bash -c 'exec php /app/artisan queue:work --sleep=3 --tries=3 --max-time=3600'
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
numprocs=2
startsecs=0
stopwaitsecs=3600
stdout_logfile=/var/log/worker-laravel.log
stderr_logfile=/var/log/worker-laravel.log
'''

"php-fpm.conf" = '''
[www]
listen = 127.0.0.1:9000
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
pm = dynamic
pm.max_children = 50
pm.min_spare_servers = 4
pm.max_spare_servers = 32
pm.start_servers = 18
clear_env = no
php_admin_value[post_max_size] = 35M
php_admin_value[upload_max_filesize] = 30M
'''

"nginx.template.conf" = '''
user www-data www-data;
worker_processes 5;
daemon off;

worker_rlimit_nofile 8192;

events {
  worker_connections  4096;
}

http {
    include    /etc/nginx/mime.types;
    index    index.html index.htm index.php;

    default_type application/octet-stream;
    log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx-access.log;
    error_log /var/log/nginx-error.log;
    sendfile     on;
    tcp_nopush   on;
    server_names_hash_bucket_size 128;

    server {
        listen ${PORT};
        listen [::]:${PORT};
        server_name localhost;

        root /app/public;

        add_header X-Content-Type-Options "nosniff";
        client_max_body_size 35M;
        index index.php;
        charset utf-8;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        error_page 404 /index.php;

        location ~ \\.php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            include /etc/nginx/fastcgi_params;
        }

        location ~ /\\.(?!well-known).* {
            deny all;
        }
    }
}
'''
